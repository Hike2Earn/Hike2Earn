const { ethers } = require("hardhat");

/**
 * Script de demostraci√≥n completa con timelock real
 * Este script crea campa√±as con fechas muy cortas para poder probar todo el flujo
 */
async function main() {
    console.log("‚ö° HIKE2EARN - DEMO COMPLETA CON TIMELOCK REAL");
    console.log("=============================================\n");

    const [owner, sponsor1, climber1, climber2] = await ethers.getSigners();
    
    console.log("üë• PARTICIPANTES DEL DEMO:");
    console.log("üìã Admin:", owner.address);
    console.log("üí∞ Sponsor:", sponsor1.address);
    console.log("üßó Climber 1:", climber1.address);
    console.log("üßó Climber 2:", climber2.address);
    console.log();

    // ========================================
    // DESPLIEGUE
    // ========================================
    console.log("üöÄ PASO 1: DESPLEGANDO CONTRATO");
    console.log("===============================");
    
    const Hike2Earn = await ethers.getContractFactory("Hike2Earn");
    const hike2Earn = await Hike2Earn.deploy();
    await hike2Earn.waitForDeployment();
    const contractAddress = await hike2Earn.getAddress();
    console.log("‚úÖ Contrato desplegado:", contractAddress);
    console.log();

    // ========================================
    // CREAR CAMPA√ëA CON DURACI√ìN CORTA
    // ========================================
    console.log("üìÖ PASO 2: CREANDO CAMPA√ëA DE PRUEBA");
    console.log("====================================");
    
    const now = Math.floor(Date.now() / 1000);
    const campaignStart = now + 10; // Empieza en 10 segundos
    const campaignEnd = now + 120; // Termina en 2 minutos
    
    const createTx = await hike2Earn.createCampaign(
        "Demo R√°pido - Monta√±as Test",
        campaignStart,
        campaignEnd
    );
    await createTx.wait();
    
    console.log("‚úÖ Campa√±a creada:");
    console.log(`   Inicio: ${new Date(campaignStart * 1000).toLocaleString()}`);
    console.log(`   Fin: ${new Date(campaignEnd * 1000).toLocaleString()}`);
    console.log(`   Duraci√≥n: ${(campaignEnd - campaignStart) / 60} minutos`);
    console.log();

    // ========================================
    // AGREGAR MONTA√ëAS
    // ========================================
    console.log("üèîÔ∏è  PASO 3: AGREGANDO MONTA√ëAS");
    console.log("===============================");
    
    const mountains = [
        { name: "Monte Demo 1", altitude: 1000, location: "Test Location 1" },
        { name: "Monte Demo 2", altitude: 2000, location: "Test Location 2" }
    ];

    for (let i = 0; i < mountains.length; i++) {
        const tx = await hike2Earn.addMountain(0, mountains[i].name, mountains[i].altitude, mountains[i].location);
        await tx.wait();
        console.log(`‚úÖ ${mountains[i].name} agregado (${mountains[i].altitude}m)`);
    }
    console.log();

    // ========================================
    // PATROCINIO
    // ========================================
    console.log("üí∞ PASO 4: PATROCINANDO CAMPA√ëA");
    console.log("===============================");
    
    const sponsorAmount = ethers.parseEther("1.0");
    const sponsorTx = await hike2Earn.connect(sponsor1).sponsorCampaign(
        0,
        "Demo Sponsor",
        "ipfs://demo-logo",
        { value: sponsorAmount }
    );
    await sponsorTx.wait();
    console.log(`‚úÖ Sponsor contribuy√≥ ${ethers.formatEther(sponsorAmount)} ETH al pool`);
    console.log();

    // ========================================
    // ESPERAR A QUE EMPIECE LA CAMPA√ëA
    // ========================================
    console.log("‚è∞ PASO 5: ESPERANDO INICIO DE CAMPA√ëA");
    console.log("======================================");
    
    const waitUntilStart = (campaignStart - Math.floor(Date.now() / 1000)) * 1000;
    if (waitUntilStart > 0) {
        console.log(`‚è≥ Esperando ${waitUntilStart/1000} segundos para que inicie la campa√±a...`);
        await new Promise(resolve => setTimeout(resolve, waitUntilStart + 1000));
    }
    console.log("‚úÖ ¬°La campa√±a ya empez√≥!");
    console.log();

    // ========================================
    // MINTEAR NFTs
    // ========================================
    console.log("üé® PASO 6: MINTEANDO NFTs");
    console.log("=========================");
    
    // Climber 1 escala Monte Demo 1
    const nft1Tx = await hike2Earn.connect(climber1).mintClimbingNFT(
        0, // mountainId
        "ipfs://demo-proof-1"
    );
    await nft1Tx.wait();
    console.log("‚úÖ Climber 1 minte√≥ NFT por Monte Demo 1");

    // Climber 2 escala Monte Demo 2
    const nft2Tx = await hike2Earn.connect(climber2).mintClimbingNFT(
        1, // mountainId
        "ipfs://demo-proof-2"
    );
    await nft2Tx.wait();
    console.log("‚úÖ Climber 2 minte√≥ NFT por Monte Demo 2");
    console.log();

    // ========================================
    // VERIFICAR NFTs
    // ========================================
    console.log("‚úÖ PASO 7: VERIFICANDO NFTs");
    console.log("============================");
    
    for (let tokenId = 1; tokenId <= 2; tokenId++) {
        const verifyTx = await hike2Earn.verifyNFT(tokenId);
        await verifyTx.wait();
        console.log(`‚úÖ NFT #${tokenId} verificado`);
    }
    console.log();

    // ========================================
    // MOSTRAR ESTADO ACTUAL
    // ========================================
    console.log("üìä PASO 8: ESTADO ACTUAL");
    console.log("========================");
    
    const campaignInfo = await hike2Earn.getCampaignInfo(0);
    console.log(`üìà Pool de premios: ${ethers.formatEther(campaignInfo[3])} ETH`);
    console.log(`üë• Participantes verificados: ${campaignInfo[4]}`);
    console.log(`üíµ Premio por participante: ${ethers.formatEther(campaignInfo[3] / BigInt(2))} ETH`);
    
    // Obtener balances antes
    const climber1BalanceBefore = await climber1.provider.getBalance(climber1.address);
    const climber2BalanceBefore = await climber2.provider.getBalance(climber2.address);
    
    console.log(`\nüí∞ BALANCES ACTUALES:`);
    console.log(`Climber 1: ${ethers.formatEther(climber1BalanceBefore)} ETH`);
    console.log(`Climber 2: ${ethers.formatEther(climber2BalanceBefore)} ETH`);
    console.log();

    // ========================================
    // ESPERAR A QUE TERMINE LA CAMPA√ëA
    // ========================================
    console.log("‚è∞ PASO 9: ESPERANDO FIN DE CAMPA√ëA");
    console.log("===================================");
    
    const waitUntilEnd = (campaignEnd - Math.floor(Date.now() / 1000)) * 1000;
    if (waitUntilEnd > 0) {
        console.log(`‚è≥ Esperando ${waitUntilEnd/1000} segundos para que termine la campa√±a...`);
        
        // Mostrar countdown
        const countdownInterval = setInterval(() => {
            const remaining = (campaignEnd - Math.floor(Date.now() / 1000));
            if (remaining > 0) {
                process.stdout.write(`\r‚è±Ô∏è  Tiempo restante: ${remaining} segundos`);
            }
        }, 1000);
        
        await new Promise(resolve => setTimeout(resolve, waitUntilEnd + 2000));
        clearInterval(countdownInterval);
        console.log(`\n‚úÖ ¬°La campa√±a termin√≥!`);
    } else {
        console.log("‚úÖ La campa√±a ya termin√≥");
    }
    console.log();

    // ========================================
    // DISTRIBUIR PREMIOS
    // ========================================
    console.log("üèÜ PASO 10: DISTRIBUYENDO PREMIOS");
    console.log("=================================");
    
    try {
        console.log("üí∞ Ejecutando distribuci√≥n de premios...");
        const distributeTx = await hike2Earn.distributePrizes(0);
        await distributeTx.wait();
        console.log("‚úÖ ¬°Premios distribuidos exitosamente!");
        
        // Verificar nuevos balances
        const climber1BalanceAfter = await climber1.provider.getBalance(climber1.address);
        const climber2BalanceAfter = await climber2.provider.getBalance(climber2.address);
        
        const climber1Gain = climber1BalanceAfter - climber1BalanceBefore;
        const climber2Gain = climber2BalanceAfter - climber2BalanceBefore;
        
        console.log(`\nüí∏ PREMIOS RECIBIDOS:`);
        console.log(`Climber 1: +${ethers.formatEther(climber1Gain)} ETH`);
        console.log(`Climber 2: +${ethers.formatEther(climber2Gain)} ETH`);
        console.log(`Total distribuido: ${ethers.formatEther(climber1Gain + climber2Gain)} ETH`);
        
    } catch (error) {
        console.log("‚ùå Error distribuyendo premios:", error.message);
    }
    console.log();

    // ========================================
    // RESUMEN FINAL
    // ========================================
    console.log("üéâ DEMO COMPLETADO EXITOSAMENTE");
    console.log("===============================");
    console.log("‚úÖ Contrato desplegado y funcionando");
    console.log("‚úÖ Campa√±a creada con tiempo real");
    console.log("‚úÖ Monta√±as agregadas a la campa√±a");
    console.log("‚úÖ Pool de premios financiado por sponsor");
    console.log("‚úÖ NFTs minteados por escaladas completadas");
    console.log("‚úÖ NFTs verificados por el administrador");
    console.log("‚úÖ Premios distribuidos equitativamente");
    
    console.log(`\nüìç DIRECCI√ìN DEL CONTRATO: ${contractAddress}`);
    console.log("üîó Guarda esta direcci√≥n para pruebas adicionales");
    
    console.log(`\n‚ö° TIEMPO TOTAL DEL DEMO: ${(campaignEnd - campaignStart) / 60} minutos`);
    console.log("üöÄ ¬°El sistema Hike2Earn funciona perfectamente!");
}

main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error("üí• Error en el demo:", error);
        process.exit(1);
    });
