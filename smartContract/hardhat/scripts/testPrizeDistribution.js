const { ethers } = require("hardhat");

/**
 * Script para probar la distribuci√≥n de premios despu√©s de que terminen las campa√±as
 * Ejecutar este script despu√©s de que hayan pasado las fechas de fin de las campa√±as
 */
async function main() {
    console.log("üèÜ TESTING PRIZE DISTRIBUTION");
    console.log("=============================\n");

    // Direcci√≥n del contrato desplegado (actualizar con la direcci√≥n real)
    const contractAddress = "TU_DIRECCION_DE_CONTRATO_AQUI"; // Cambiar por la direcci√≥n real
    
    if (contractAddress === "TU_DIRECCION_DE_CONTRATO_AQUI") {
        console.log("‚ùå ERROR: Debes actualizar la direcci√≥n del contrato en el script");
        console.log("üìù Edita testPrizeDistribution.js y cambia 'TU_DIRECCION_DE_CONTRATO_AQUI'");
        console.log("üìç Usa la direcci√≥n que se mostr√≥ cuando ejecutaste el deploy");
        process.exit(1);
    }

    const [owner, , , climber1, climber2, climber3] = await ethers.getSigners();
    console.log("üë§ Admin:", owner.address);
    console.log("üìç Contrato:", contractAddress);
    console.log();

    // Conectar al contrato
    const hike2Earn = await ethers.getContractAt("Hike2Earn", contractAddress);

    // ========================================
    // VERIFICAR ESTADO DE CAMPA√ëAS
    // ========================================
    console.log("üìä ESTADO ACTUAL DE CAMPA√ëAS");
    console.log("=============================");
    
    for (let campaignId = 0; campaignId < 2; campaignId++) {
        const campaignInfo = await hike2Earn.getCampaignInfo(campaignId);
        const now = Math.floor(Date.now() / 1000);
        const endDate = Number(campaignInfo[2]);
        const hasEnded = now > endDate;
        
        console.log(`\nüèïÔ∏è  CAMPA√ëA ${campaignId}:`);
        console.log(`   Nombre: ${campaignInfo[0]}`);
        console.log(`   Fin: ${new Date(endDate * 1000).toLocaleString()}`);
        console.log(`   Estado: ${hasEnded ? '‚úÖ TERMINADA' : '‚è≥ ACTIVA'}`);
        console.log(`   Pool ETH: ${ethers.formatEther(campaignInfo[3])} ETH`);
        console.log(`   Participantes: ${campaignInfo[4]}`);
        console.log(`   Premios ya distribuidos: ${campaignInfo[6] ? 'S√ç' : 'NO'}`);
    }
    console.log();

    // ========================================
    // OBTENER BALANCES ANTES DE LA DISTRIBUCI√ìN
    // ========================================
    console.log("üí∞ BALANCES ANTES DE DISTRIBUCI√ìN");
    console.log("=================================");
    
    const participants = [
        { name: "Climber 1", address: climber1.address, signer: climber1 },
        { name: "Climber 2", address: climber2.address, signer: climber2 },
        { name: "Climber 3", address: climber3.address, signer: climber3 }
    ];

    const balancesBefore = {};
    for (const participant of participants) {
        const balance = await participant.signer.provider.getBalance(participant.address);
        balancesBefore[participant.address] = balance;
        console.log(`${participant.name}: ${ethers.formatEther(balance)} ETH`);
    }
    console.log();

    // ========================================
    // DISTRIBUIR PREMIOS DE CAMPA√ëA 0
    // ========================================
    console.log("üèÜ DISTRIBUYENDO PREMIOS - CAMPA√ëA 0");
    console.log("====================================");
    
    try {
        const campaign0Info = await hike2Earn.getCampaignInfo(0);
        
        if (campaign0Info[6]) {
            console.log("‚ÑπÔ∏è  Los premios de la Campa√±a 0 ya fueron distribuidos");
        } else if (Number(campaign0Info[4]) === 0) {
            console.log("‚ö†Ô∏è  No hay participantes verificados en la Campa√±a 0");
        } else {
            console.log(`üí∞ Pool de premios: ${ethers.formatEther(campaign0Info[3])} ETH`);
            console.log(`üë• Participantes: ${campaign0Info[4]}`);
            console.log(`üíµ Premio por participante: ${ethers.formatEther(campaign0Info[3] / BigInt(campaign0Info[4]))} ETH`);
            
            const distributeTx = await hike2Earn.distributePrizes(0);
            console.log("‚è≥ Ejecutando distribuci√≥n...");
            await distributeTx.wait();
            console.log("‚úÖ Premios de Campa√±a 0 distribuidos exitosamente!");
        }
    } catch (error) {
        console.log("‚ùå Error distribuyendo premios de Campa√±a 0:", error.message);
        if (error.message.includes("Campaign still active")) {
            console.log("‚ÑπÔ∏è  La campa√±a a√∫n est√° activa, espera hasta despu√©s de la fecha de fin");
        }
    }
    console.log();

    // ========================================
    // DISTRIBUIR PREMIOS DE CAMPA√ëA 1
    // ========================================
    console.log("üèÜ DISTRIBUYENDO PREMIOS - CAMPA√ëA 1");
    console.log("====================================");
    
    try {
        const campaign1Info = await hike2Earn.getCampaignInfo(1);
        
        if (campaign1Info[6]) {
            console.log("‚ÑπÔ∏è  Los premios de la Campa√±a 1 ya fueron distribuidos");
        } else if (Number(campaign1Info[4]) === 0) {
            console.log("‚ö†Ô∏è  No hay participantes verificados en la Campa√±a 1");
        } else {
            console.log(`üí∞ Pool de premios: ${ethers.formatEther(campaign1Info[3])} ETH`);
            console.log(`üë• Participantes: ${campaign1Info[4]}`);
            console.log(`üíµ Premio por participante: ${ethers.formatEther(campaign1Info[3] / BigInt(campaign1Info[4]))} ETH`);
            
            const distributeTx = await hike2Earn.distributePrizes(1);
            console.log("‚è≥ Ejecutando distribuci√≥n...");
            await distributeTx.wait();
            console.log("‚úÖ Premios de Campa√±a 1 distribuidos exitosamente!");
        }
    } catch (error) {
        console.log("‚ùå Error distribuyendo premios de Campa√±a 1:", error.message);
        if (error.message.includes("Campaign still active")) {
            console.log("‚ÑπÔ∏è  La campa√±a a√∫n est√° activa, espera hasta despu√©s de la fecha de fin");
        }
    }
    console.log();

    // ========================================
    // VERIFICAR BALANCES DESPU√âS DE LA DISTRIBUCI√ìN
    // ========================================
    console.log("üí∞ BALANCES DESPU√âS DE DISTRIBUCI√ìN");
    console.log("===================================");
    
    let totalDistributed = 0n;
    for (const participant of participants) {
        const balanceAfter = await participant.signer.provider.getBalance(participant.address);
        const balanceBefore = balancesBefore[participant.address];
        const difference = balanceAfter - balanceBefore;
        
        console.log(`${participant.name}:`);
        console.log(`  Antes: ${ethers.formatEther(balanceBefore)} ETH`);
        console.log(`  Despu√©s: ${ethers.formatEther(balanceAfter)} ETH`);
        console.log(`  Ganancia: ${ethers.formatEther(difference)} ETH`);
        console.log();
        
        totalDistributed += difference;
    }

    console.log(`üí∏ Total distribuido: ${ethers.formatEther(totalDistributed)} ETH`);
    console.log();

    // ========================================
    // ESTAD√çSTICAS FINALES
    // ========================================
    console.log("üìä ESTAD√çSTICAS FINALES");
    console.log("=======================");
    
    for (let campaignId = 0; campaignId < 2; campaignId++) {
        const campaignInfo = await hike2Earn.getCampaignInfo(campaignId);
        console.log(`\nüèïÔ∏è  Campa√±a ${campaignId} - ${campaignInfo[0]}:`);
        console.log(`   Pool original: ${ethers.formatEther(campaignInfo[3])} ETH`);
        console.log(`   Participantes: ${campaignInfo[4]}`);
        console.log(`   Premios distribuidos: ${campaignInfo[6] ? 'S√ç' : 'NO'}`);
    }
    
    console.log("\nüéâ DISTRIBUCI√ìN DE PREMIOS COMPLETADA");
    console.log("====================================");
    console.log("‚úÖ Todos los participantes verificados recibieron su parte igual del pool");
    console.log("üèÜ El sistema de recompensas NFT funciona correctamente");
}

// Script alternativo para usar con direcci√≥n espec√≠fica
async function testWithAddress(contractAddress) {
    console.log(`üéØ Testing con contrato en: ${contractAddress}`);
    
    // Aqu√≠ puedes copiar la l√≥gica principal pero usando la direcci√≥n proporcionada
    // Este es √∫til para llamar desde la consola de Hardhat
    const [owner] = await ethers.getSigners();
    const hike2Earn = await ethers.getContractAt("Hike2Earn", contractAddress);
    
    try {
        const campaign0Info = await hike2Earn.getCampaignInfo(0);
        console.log(`Campa√±a 0: ${campaign0Info[0]}`);
        console.log(`Pool: ${ethers.formatEther(campaign0Info[3])} ETH`);
        console.log(`Participantes: ${campaign0Info[4]}`);
        
        if (!campaign0Info[6] && Number(campaign0Info[4]) > 0) {
            console.log("Distribuyendo premios...");
            const tx = await hike2Earn.distributePrizes(0);
            await tx.wait();
            console.log("‚úÖ Premios distribuidos!");
        }
    } catch (error) {
        console.log("Error:", error.message);
    }
}

// Para uso desde consola de Hardhat
module.exports = { testWithAddress };

main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error("üí• Error:", error);
        process.exit(1);
    });
